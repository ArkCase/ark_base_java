#!/bin/bash

set -euo pipefail
. /.functions

list_options()
{
	local NAME="${1}"
	local VER="${2}"
	local A B C
	alternatives --config "${NAME}" </dev/null 2>/dev/null | \
		grep "java-${VER}-" | \
		while read A B C ; do
			[[ "${A}" =~ ^[1-9][0-9]*$ ]] && echo "${A} ${B} ${C}" || echo "${B} ${C}"
		done | sort -n
}

get_option()
{
	local NAME="${1}"
	local VER="${2}"
	local OPTIONS=()
	readarray -t OPTIONS < <(list_options "${NAME}" "${VER}")
	case ${#OPTIONS[@]} in
		0 ) echo "No alternatives were found for ${NAME} version ${VER}" ;;
		1 ) echo "${OPTIONS[0]}" ; return 0 ;;
		* ) echo "The alternative for ${NAME} version ${VER} had ${#OPTIONS[@]} options: [${OPTIONS[@]}]" ;;
	esac
	return 1
}

usage()
{
	echo -e "usage: ${BASH_ARGV0:-${BASH_SOURCE:-${0}}} [ version ]"
	echo -e ""
	echo -e "\tIf the version is not given as a parameter, an attempt"
	echo -e "\twill be made to read it from the environment variable"
	echo -e "\tALT_JAVA if it's defined and non-empty."
	echo -e ""
	exit 1
}

# If no parameter is given, we try to select the java
# version from the ALT_JAVA ENVVAR
[ ${#} -eq 0 ] && [ -v ALT_JAVA ] && [ -n "${ALT_JAVA}" ] && set -- "${ALT_JAVA}"

[ ${#} -eq 1 ] || usage
[ -n "${1}" ] || usage

# Make sure we run as root
[ $(id -u) -eq 0 ] || exec sudo --non-interactive --preserve-env "PATH=${PATH}" "${0}" "${@}"

VER="${1}"

for ALT in java javac ; do
	alternatives --display "${ALT}" &>/dev/null || continue

	if [ "${VER,,}" == "auto" ] ; then
		alternatives --auto "${ALT}" || fail "Failed to re-set the alternative ${ALT} to auto mode"
		ok "Re-set the ${ALT} alternative to automatic mode"
		continue
	fi

	OUT="$(get_option "${ALT}" "${VER}")" || fail "${OUT}"
	read NUM LABEL <<< "${OUT}"
	RESULT="$(echo "${NUM}" | alternatives --config "${ALT}" 2>&1)" || fail "Failed to configure the ${ALT} alternative to [${LABEL}]  (number ${NUM}) (rc=${?}):\n${RESULT}"
	ok "Set ${ALT} to [${LABEL}]"
done
